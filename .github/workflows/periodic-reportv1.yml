# .github/workflows/periodic-report.yml
name: Periodic Period Report

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Data inicial (YYYY-MM-DD) — opcional'
        required: false
        default: ''
      end:
        description: 'Data final (YYYY-MM-DD) — opcional'
        required: false
        default: ''
  schedule:
    # 10h–21h BRT ≈ 13h–00h UTC
    - cron: '0 13-23 * * *'  # 13..23 UTC
    - cron: '0 0 * * *'      # 00 UTC

concurrency:
  group: period-report
  cancel-in-progress: true

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # libs do upload p/ Google Drive (service account)
          pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create .env for the app
        run: |
          cat > .env <<'ENV'
          FB_HOST=${{ secrets.SYNDATA_HOST }}
          FB_PORT=${{ secrets.SYNDATA_PORT }}
          FB_PATH=${{ secrets.SYNDATA_DB_PATH }}
          FB_USER=${{ secrets.SYNDATA_USER }}
          FB_PASS=${{ secrets.SYNDATA_PASSWORD }}
          FB_CHARSET=${{ secrets.SYNDATA_CHARSET }}
          ENV

      - name: Show .env (masked)
        run: |
          echo "==== .env (mascarado pelo GitHub) ===="
          cat .env

      - name: Run period report (generates the two CSVs)
        env:
          START_DATE: ${{ inputs.start || '' }}
          END_DATE:   ${{ inputs.end   || '' }}
        run: |
          mkdir -p output
          # Se o seu build_period_report.py já cria os CSVs, só chame-o:
          python build_period_report.py ${START_DATE:+--start "$START_DATE"} ${END_DATE:+--end "$END_DATE"}
          echo "=== Arquivos gerados ==="
          ls -la output || true

      - name: Write Google Service Account credentials
        run: |
          echo '${{ secrets.GDRIVE_SA_JSON }}' > google_sa.json

      - name: Upload to Google Drive (by File ID)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/google_sa.json
          FILE_ID_DAILY:   ${{ secrets.DRIVE_FILE_ID_FACT }}
          FILE_ID_SELLERS: ${{ secrets.DRIVE_FILE_ID_FACT_VENDOR }}
        run: |
          python - <<'PY'
          import os, io, sys
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          creds = service_account.Credentials.from_service_account_file(
              os.environ["GOOGLE_APPLICATION_CREDENTIALS"],
              scopes=["https://www.googleapis.com/auth/drive"]
          )
          drive = build("drive", "v3", credentials=creds)

          files = [
              ("output/fato_vendas_diario.csv",   os.environ["FILE_ID_DAILY"]),
              ("output/fato_vendas_vendedor_diario.csv", os.environ["FILE_ID_SELLERS"]),
          ]

          for path, file_id in files:
              if not os.path.exists(path):
                  print(f"[ERRO] Arquivo não encontrado: {path}")
                  sys.exit(1)
              media = MediaFileUpload(path, mimetype="text/csv", resumable=False)
              drive.files().update(fileId=file_id, media_body=media).execute()
              print(f"[OK] Atualizado por fileId: {file_id} <- {path}")
          PY        