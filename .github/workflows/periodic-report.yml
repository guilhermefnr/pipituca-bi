name: Periodic Period Report

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Data inicial (YYYY-MM-DD), opcional'
        required: false
        type: string
      end:
        description: 'Data final (YYYY-MM-DD), opcional'
        required: false
        type: string
  # 10h–21h (GMT-3) == 13:00–00:00 UTC
  schedule:
    - cron: '0 13-23 * * *'   # 13:00–23:00 UTC
    - cron: '0 0 * * *'       # 00:00 UTC

concurrency:
  group: period-report
  cancel-in-progress: true

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env for the app
        run: |
          cat > .env <<'ENV'
          FB_HOST=${{ secrets.FB_HOST }}
          FB_PORT=${{ secrets.FB_PORT }}
          FB_PATH=${{ secrets.FB_PATH }}
          FB_USER=${{ secrets.FB_USER }}
          FB_PASS=${{ secrets.FB_PASS }}
          FB_CHARSET=${{ secrets.FB_CHARSET }}
          ENV
          echo "✅ .env criado"

      - name: Show .env (masked)
        run: |
          sed -E 's/(FB_PASS=).*/\1********/; s/(FB_USER=).*/\1********/;' .env || true
          echo

      - name: Run period report (generates the two CSVs)
        env:
          START_DATE: ${{ github.event.inputs.start }}
          END_DATE:   ${{ github.event.inputs.end }}
        run: |
          mkdir -p output
          python build_period_report.py ${START_DATE:+--start "$START_DATE"} ${END_DATE:+--end "$END_DATE"}
          echo "=== Arquivos gerados ==="
          ls -la output || true

      - name: Write Google Service Account credentials
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}" > google_sa.json
          python - <<'PY'
          import json,sys
          p='google_sa.json'
          try:
              json.load(open(p))
              print("✅ google_sa.json OK")
          except Exception as e:
              print("❌ google_sa.json inválido:", e); sys.exit(1)
          PY

      - name: Upload to Google Drive (by File ID)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/google_sa.json
          FILE_ID_DAILY:   ${{ secrets.DRIVE_FILE_ID_FACT }}
          FILE_ID_SELLERS: ${{ secrets.DRIVE_FILE_ID_FACT_VENDOR }}
        run: |
          python - <<'PY'
          import os, sys
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          creds = service_account.Credentials.from_service_account_file(
              os.environ["GOOGLE_APPLICATION_CREDENTIALS"],
              scopes=["https://www.googleapis.com/auth/drive"]
          )
          drive = build("drive", "v3", credentials=creds)

          def upload(fid, path):
              if not os.path.exists(path):
                  print(f"[ERRO] Arquivo não encontrado: {path}")
                  sys.exit(1)
              media = MediaFileUpload(path, mimetype="text/csv", resumable=False)
              drive.files().update(fileId=fid, media_body=media).execute()
              print(f"[OK] Enviado: {path} -> {fid}")

          upload(os.environ["FILE_ID_DAILY"],   "output/fato_vendas_diario.csv")
          upload(os.environ["FILE_ID_SELLERS"], "output/fato_vendas_vendedor_diario.csv")
          PY